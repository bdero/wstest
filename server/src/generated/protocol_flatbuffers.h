// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOL_WSTEST_FB_H_
#define FLATBUFFERS_GENERATED_PROTOCOL_WSTEST_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 29,
             "Non-compatible flatbuffers version included");

namespace wstest {
namespace fb {

struct Vec2;

struct Vec3;

struct Color;

struct Vertex;

struct Mesh;
struct MeshBuilder;
struct MeshT;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  struct Traits;
  Vec2()
      : x_(0),
        y_(0) {
  }
  Vec2(float _x, float _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  template<size_t Index>
  auto get_field() const {
         if constexpr (Index == 0) return x();
    else if constexpr (Index == 1) return y();
    else static_assert(Index != Index, "Invalid Field Index");
  }
};
FLATBUFFERS_STRUCT_END(Vec2, 8);

struct Vec2::Traits {
  using type = Vec2;
  static constexpr auto name = "Vec2";
  static constexpr auto fully_qualified_name = "wstest.fb.Vec2";
  static constexpr size_t fields_number = 2;
  static constexpr std::array<const char *, fields_number> field_names = {
    "x",
    "y"
  };
  template<size_t Index>
  using FieldType = decltype(std::declval<type>().get_field<Index>());
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  struct Traits;
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
  template<size_t Index>
  auto get_field() const {
         if constexpr (Index == 0) return x();
    else if constexpr (Index == 1) return y();
    else if constexpr (Index == 2) return z();
    else static_assert(Index != Index, "Invalid Field Index");
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

struct Vec3::Traits {
  using type = Vec3;
  static constexpr auto name = "Vec3";
  static constexpr auto fully_qualified_name = "wstest.fb.Vec3";
  static constexpr size_t fields_number = 3;
  static constexpr std::array<const char *, fields_number> field_names = {
    "x",
    "y",
    "z"
  };
  template<size_t Index>
  using FieldType = decltype(std::declval<type>().get_field<Index>());
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Color FLATBUFFERS_FINAL_CLASS {
 private:
  float r_;
  float g_;
  float b_;

 public:
  struct Traits;
  Color()
      : r_(0),
        g_(0),
        b_(0) {
  }
  Color(float _r, float _g, float _b)
      : r_(flatbuffers::EndianScalar(_r)),
        g_(flatbuffers::EndianScalar(_g)),
        b_(flatbuffers::EndianScalar(_b)) {
  }
  float r() const {
    return flatbuffers::EndianScalar(r_);
  }
  float g() const {
    return flatbuffers::EndianScalar(g_);
  }
  float b() const {
    return flatbuffers::EndianScalar(b_);
  }
  template<size_t Index>
  auto get_field() const {
         if constexpr (Index == 0) return r();
    else if constexpr (Index == 1) return g();
    else if constexpr (Index == 2) return b();
    else static_assert(Index != Index, "Invalid Field Index");
  }
};
FLATBUFFERS_STRUCT_END(Color, 12);

struct Color::Traits {
  using type = Color;
  static constexpr auto name = "Color";
  static constexpr auto fully_qualified_name = "wstest.fb.Color";
  static constexpr size_t fields_number = 3;
  static constexpr std::array<const char *, fields_number> field_names = {
    "r",
    "g",
    "b"
  };
  template<size_t Index>
  using FieldType = decltype(std::declval<type>().get_field<Index>());
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vertex FLATBUFFERS_FINAL_CLASS {
 private:
  wstest::fb::Vec3 position_;
  wstest::fb::Vec3 normal_;
  wstest::fb::Vec3 tangent_;
  wstest::fb::Vec2 texture_coords_;

 public:
  struct Traits;
  Vertex()
      : position_(),
        normal_(),
        tangent_(),
        texture_coords_() {
  }
  Vertex(const wstest::fb::Vec3 &_position, const wstest::fb::Vec3 &_normal, const wstest::fb::Vec3 &_tangent, const wstest::fb::Vec2 &_texture_coords)
      : position_(_position),
        normal_(_normal),
        tangent_(_tangent),
        texture_coords_(_texture_coords) {
  }
  const wstest::fb::Vec3 &position() const {
    return position_;
  }
  const wstest::fb::Vec3 &normal() const {
    return normal_;
  }
  const wstest::fb::Vec3 &tangent() const {
    return tangent_;
  }
  const wstest::fb::Vec2 &texture_coords() const {
    return texture_coords_;
  }
  template<size_t Index>
  auto get_field() const {
         if constexpr (Index == 0) return position();
    else if constexpr (Index == 1) return normal();
    else if constexpr (Index == 2) return tangent();
    else if constexpr (Index == 3) return texture_coords();
    else static_assert(Index != Index, "Invalid Field Index");
  }
};
FLATBUFFERS_STRUCT_END(Vertex, 44);

struct Vertex::Traits {
  using type = Vertex;
  static constexpr auto name = "Vertex";
  static constexpr auto fully_qualified_name = "wstest.fb.Vertex";
  static constexpr size_t fields_number = 4;
  static constexpr std::array<const char *, fields_number> field_names = {
    "position",
    "normal",
    "tangent",
    "texture_coords"
  };
  template<size_t Index>
  using FieldType = decltype(std::declval<type>().get_field<Index>());
};

struct MeshT : public flatbuffers::NativeTable {
  typedef Mesh TableType;
  std::vector<wstest::fb::Vertex> vertices{};
  std::vector<uint16_t> indices{};
};

struct Mesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MeshT NativeTableType;
  typedef MeshBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTICES = 4,
    VT_INDICES = 6
  };
  const flatbuffers::Vector<const wstest::fb::Vertex *> *vertices() const {
    return GetPointer<const flatbuffers::Vector<const wstest::fb::Vertex *> *>(VT_VERTICES);
  }
  const flatbuffers::Vector<uint16_t> *indices() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_INDICES);
  }
  template<size_t Index>
  auto get_field() const {
         if constexpr (Index == 0) return vertices();
    else if constexpr (Index == 1) return indices();
    else static_assert(Index != Index, "Invalid Field Index");
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           verifier.EndTable();
  }
  MeshT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MeshT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Mesh> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MeshT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MeshBuilder {
  typedef Mesh Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_vertices(flatbuffers::Offset<flatbuffers::Vector<const wstest::fb::Vertex *>> vertices) {
    fbb_.AddOffset(Mesh::VT_VERTICES, vertices);
  }
  void add_indices(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> indices) {
    fbb_.AddOffset(Mesh::VT_INDICES, indices);
  }
  explicit MeshBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Mesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Mesh>(end);
    return o;
  }
};

inline flatbuffers::Offset<Mesh> CreateMesh(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const wstest::fb::Vertex *>> vertices = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> indices = 0) {
  MeshBuilder builder_(_fbb);
  builder_.add_indices(indices);
  builder_.add_vertices(vertices);
  return builder_.Finish();
}

struct Mesh::Traits {
  using type = Mesh;
  static auto constexpr Create = CreateMesh;
  static constexpr auto name = "Mesh";
  static constexpr auto fully_qualified_name = "wstest.fb.Mesh";
  static constexpr size_t fields_number = 2;
  static constexpr std::array<const char *, fields_number> field_names = {
    "vertices",
    "indices"
  };
  template<size_t Index>
  using FieldType = decltype(std::declval<type>().get_field<Index>());
};

inline flatbuffers::Offset<Mesh> CreateMeshDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<wstest::fb::Vertex> *vertices = nullptr,
    const std::vector<uint16_t> *indices = nullptr) {
  auto vertices__ = vertices ? _fbb.CreateVectorOfStructs<wstest::fb::Vertex>(*vertices) : 0;
  auto indices__ = indices ? _fbb.CreateVector<uint16_t>(*indices) : 0;
  return wstest::fb::CreateMesh(
      _fbb,
      vertices__,
      indices__);
}

flatbuffers::Offset<Mesh> CreateMesh(flatbuffers::FlatBufferBuilder &_fbb, const MeshT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MeshT *Mesh::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::make_unique<MeshT>();
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Mesh::UnPackTo(MeshT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = vertices(); if (_e) { _o->vertices.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->vertices[_i] = *_e->Get(_i); } } else { _o->vertices.resize(0); } }
  { auto _e = indices(); if (_e) { _o->indices.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->indices[_i] = _e->Get(_i); } } else { _o->indices.resize(0); } }
}

inline flatbuffers::Offset<Mesh> Mesh::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MeshT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMesh(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Mesh> CreateMesh(flatbuffers::FlatBufferBuilder &_fbb, const MeshT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MeshT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _vertices = _o->vertices.size() ? _fbb.CreateVectorOfStructs(_o->vertices) : 0;
  auto _indices = _o->indices.size() ? _fbb.CreateVector(_o->indices) : 0;
  return wstest::fb::CreateMesh(
      _fbb,
      _vertices,
      _indices);
}

inline const wstest::fb::Mesh *GetMesh(const void *buf) {
  return flatbuffers::GetRoot<wstest::fb::Mesh>(buf);
}

inline const wstest::fb::Mesh *GetSizePrefixedMesh(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<wstest::fb::Mesh>(buf);
}

inline bool VerifyMeshBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<wstest::fb::Mesh>(nullptr);
}

inline bool VerifySizePrefixedMeshBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<wstest::fb::Mesh>(nullptr);
}

inline void FinishMeshBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<wstest::fb::Mesh> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMeshBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<wstest::fb::Mesh> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<wstest::fb::MeshT> UnPackMesh(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<wstest::fb::MeshT>(GetMesh(buf)->UnPack(res));
}

inline std::unique_ptr<wstest::fb::MeshT> UnPackSizePrefixedMesh(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<wstest::fb::MeshT>(GetSizePrefixedMesh(buf)->UnPack(res));
}

}  // namespace fb
}  // namespace wstest

#endif  // FLATBUFFERS_GENERATED_PROTOCOL_WSTEST_FB_H_
